{"version":3,"sources":["components/Dropzone.jsx","components/Chart.js","App.js","serviceWorker.js","index.js"],"names":["baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","outline","transition","activeStyle","acceptStyle","rejectStyle","DropZone","props","onDrop","useCallback","acceptedFiles","reader","FileReader","onabort","console","log","onerror","onload","binaryStr","result","onFileParse","name","forEach","file","readAsBinaryString","_useDropzone","useDropzone","multiple","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","style","useMemo","Object","objectSpread","react_default","a","createElement","className","Chart","data","this","colorData","keys","ramp","colors","map","values","point","intensity","parseInt","_text","time","d3","select","remove","margin","top","right","bottom","left","width","height","xTickValues","xScale","domain","xMax","range","yScale","line","x","d","y","curve","svg","append","attr","call","tickValues","tickSize","tickFormat","concat","selectAll","g","datum","points","enter","on","mouse","lines","document","getElementsByClassName","i","position","beginning","end","getTotalLength","target","Math","floor","getPointAtLength","text","invert","toFixed","filename","React","Component","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","state","json","_this2","URLSearchParams","window","location","search","get","fetch","then","xml","handleParsedFile","convert","xml2js","compact","setState","_this3","_this$state","components_Chart","Dropzone","href","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0df8ba00.chunk.js","sourcesContent":["import React, { useCallback, useMemo } from 'react'\nimport { useDropzone } from 'react-dropzone'\n\nconst baseStyle = {\n  flex: 1,\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  padding: '50px',\n  borderWidth: 2,\n  borderRadius: 18,\n  borderColor: '#eeeeee',\n  borderStyle: 'dashed',\n  backgroundColor: '#fafafa',\n  color: '#bdbdbd',\n  outline: 'none',\n  transition: 'border .24s ease-in-out'\n}\n\nconst activeStyle = {\n  borderColor: '#2196f3'\n}\n\nconst acceptStyle = {\n  borderColor: '#00e676'\n}\n\nconst rejectStyle = {\n  borderColor: '#ff1744'\n}\n\nconst DropZone = (props) => {\n  const onDrop = useCallback(acceptedFiles => {\n    const reader = new FileReader()\n\n    reader.onabort = () => console.log('file reading was aborted')\n    reader.onerror = () => console.log('file reading has failed')\n    reader.onload = () => {\n      // Do whatever you want with the file contents\n      const binaryStr = reader.result\n      props.onFileParse(binaryStr, acceptedFiles[0].name)\n    }\n\n    acceptedFiles.forEach(file => reader.readAsBinaryString(file))\n  }, [])\n\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject\n  } = useDropzone({\n    multiple: false,\n    onDrop\n  })\n\n  const style = useMemo(() => ({\n    ...baseStyle,\n    ...(isDragActive ? activeStyle : {}),\n    ...(isDragAccept ? acceptStyle : {}),\n    ...(isDragReject ? rejectStyle : {})\n  }), [\n    isDragActive,\n    isDragReject\n  ])\n\n  return (\n    <section className=\"container\">\n      <div {...getRootProps({ className: 'dropzone', style })}>\n        <input {...getInputProps()} />\n        <p>Drag and drop an aip file here, or click to select one</p>\n      </div>\n    </section>\n  )\n}\n\nexport default DropZone\n","import React from 'react'\nimport * as d3 from 'd3'\n\nclass Chart extends React.Component {\n  componentDidMount () {\n    const { data } = this.props\n\n    // clean up the data so it looks like\n    // [\n    //   {\n    //     name: 'blue',\n    //     values: [\n    //       {\n    //         time: 0,\n    //         intensity: 0\n    //       },\n    //       ...\n    //     ]\n    //   },\n    //   ...\n    // ]\n    const colorData = Object.keys(data.ramp.colors).map((color) => {\n      return {\n        name: color,\n        values: data.ramp.colors[color].point.map((point) => {\n          return {\n            intensity: parseInt(point.intensity._text),\n            time: parseInt(point.time._text)\n          }\n        })\n      }\n    })\n\n    if (data) {\n      d3.select('.chart').select('svg').remove()\n      // chart based on https://bl.ocks.org/gordlea/27370d1eea8464b04538e6d8ced39e89\n\n      // TODO get the width of the container and do everything dynamically\n      const margin = { top: 50, right: 50, bottom: 100, left: 50 }\n      const width = 960 - margin.left - margin.right\n      const height = 500 - margin.top - margin.bottom\n\n      const xMax = 1440 // x axis is # of minutes in a day\n      const yMax = 1500 // assume 2000 is max y, not sure what max intensity can be\n      const xTickValues = [0, 240, 480, 720, 960, 1200, 1440]\n      const yTickValues = [0, 500, 1000, 1500, 2000]\n\n      const xScale = d3.scaleLinear()\n        .domain([0, xMax - 1])\n        .range([0, width])\n\n      const yScale = d3.scaleLinear()\n        .domain([0, yMax])\n        .range([height, 0])\n\n      const line = d3.line()\n        .x(function (d) { return xScale(parseInt(d.time)) })\n        .y(function (d) { return yScale(parseInt(d.intensity)) })\n        .curve(d3.curveMonotoneX)\n\n      const svg = d3.select('.chart').append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\n      // x axis\n      svg.append('g')\n        .attr('class', 'x axis')\n        .attr('transform', 'translate(0,' + (height) + ')')\n        .call(\n          d3.axisBottom(xScale)\n            .tickValues(xTickValues)\n            .tickSize(0)\n            .tickFormat((d) => {\n              // handle midnight\n              if (d === 0 || d === 1440) return '12AM'\n              // handle noon\n              if (d === 720) return '12AM'\n              // handle pm\n              if (d > 720) return `${(d - 720) / 60}PM`\n              return `${d / 60}AM`\n            })\n        )\n        .selectAll('text')\n        .attr('dy', '1.5em')\n\n      // add vertical gridlines\n      svg.append('g')\n        .attr('class', 'grid')\n        .attr('transform', 'translate(0,' + height + ')')\n        .call(\n          d3.axisBottom(xScale)\n            .tickValues(xTickValues)\n            .tickSize(-height)\n            .tickFormat('')\n        )\n        .call(g => g.select('.domain').remove())\n\n      // add horizontal gridlines\n      svg.append('g')\n        .attr('class', 'grid')\n        .call(\n          d3.axisLeft(yScale)\n            .tickValues(yTickValues)\n            .tickSize(-width)\n            .tickFormat('')\n        )\n        .call(g => g.select('.domain').remove())\n\n      // for each color in the data, render a line\n      colorData.forEach((color) => {\n        svg.append('path')\n          .datum(color.values)\n          .attr('class', `line ${color.name}`)\n          .attr('d', line)\n      })\n\n      // render circles below the x-axis for each time specified in the file\n      const points = colorData[0].values.map(d => d.time)\n      svg.selectAll('.dot')\n        .data(points)\n        .enter().append('circle')\n        .attr('class', 'dot')\n        .attr('cx', d => xScale(d))\n        .attr('cy', height + 20)\n        .attr('r', 5)\n\n      // mouseover effect\n      // https://bl.ocks.org/larsenmtl/e3b8b7c2ca4787f77d78f58d41c3da91\n\n      svg.append('path') // this is the black vertical line to follow mouse\n        .attr('class', 'mouse-line')\n        .style('stroke', 'black')\n        .style('stroke-width', '1px')\n        .style('opacity', '0')\n\n      svg.append('rect') // append a rect to catch mouse movements on canvas\n        .attr('width', width) // can't catch mouse events on a g element\n        .attr('height', height)\n        .attr('fill', 'none')\n        .attr('pointer-events', 'all')\n        .on('mouseout', function () { // on mouse out hide line, circles and text\n          d3.select('.mouse-line')\n            .style('opacity', '0')\n          d3.selectAll('.mouse-per-line circle')\n            .style('opacity', '0')\n          d3.selectAll('.mouse-per-line text')\n            .style('opacity', '0')\n        })\n        .on('mouseover', function () { // on mouse in show line, circles and text\n          d3.select('.mouse-line')\n            .style('opacity', '1')\n          d3.selectAll('.mouse-per-line circle')\n            .style('opacity', '1')\n          d3.selectAll('.mouse-per-line text')\n            .style('opacity', '1')\n        })\n        .on('mousemove', function () { // mouse moving over canvas\n          var mouse = d3.mouse(this)\n          d3.select('.mouse-line')\n            .attr('d', function () {\n              var d = 'M' + mouse[0] + ',' + height\n              d += ' ' + mouse[0] + ',' + 0\n              return d\n            })\n\n          var lines = document.getElementsByClassName('line')\n\n          d3.selectAll('.mouse-per-line')\n            .attr('transform', function (d, i) {\n              // start with the full length of the line\n              var beginning = 0\n              var end = lines[i].getTotalLength()\n              var target = null\n\n              let position\n\n              // follow the line along the x dimension\n              // slice the line into smaller and smaller segments until\n              // the midpoint matches the mouse's x position\n              // now we know the y position\n              while (true) {\n                target = Math.floor((beginning + end) / 2)\n                position = lines[i].getPointAtLength(target)\n\n                // handle begginning and end\n                if ((target === end || target === beginning) && position.x !== mouse[0]) {\n                  break\n                }\n\n                if (position.x > mouse[0]) end = target\n                else if (position.x < mouse[0]) beginning = target\n                else break // position found when x = mouse[0]\n              }\n\n              d3.select(this).select('text')\n                .text(yScale.invert(position.y).toFixed(2))\n\n              return 'translate(' + mouse[0] + ',' + position.y + ')'\n            })\n        })\n\n      var mousePerLine = svg.selectAll('.mouse-per-line')\n        .data(colorData)\n        .enter()\n        .append('g')\n        .attr('class', 'mouse-per-line')\n\n      mousePerLine.append('circle')\n        .attr('r', 7)\n        .attr('class', d => d.name)\n        .style('fill', 'none')\n        .style('stroke-width', '1px')\n        .style('opacity', '0')\n    }\n  }\n\n  render () {\n    const { filename } = this.props\n    return (\n      <div className=\"chart-container\">\n        <h2>{filename}</h2>\n        <div className=\"chart\"></div>\n      </div>\n    )\n  }\n}\n\nexport default Chart\n","import React from 'react'\nimport convert from 'xml-js'\n\nimport Dropzone from './components/Dropzone'\nimport Chart from './components/Chart'\n\nimport './App.css'\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      json: null\n    }\n  }\n\n  componentDidMount () {\n    // look for dev=true query param\n    // load sample data\n    if (new URLSearchParams(window.location.search).get('dev')) {\n      fetch('data/ai-signature-saxby.aip')\n        .then(d => d.text())\n        .then((xml) => {\n          this.handleParsedFile(xml, 'ai-signature-saxby.aip')\n        })\n    }\n  }\n\n  handleParsedFile (xml, filename) {\n    const json = convert.xml2js(xml, { compact: true })\n    this.setState({\n      json,\n      filename\n    })\n  }\n\n  render () {\n    const { json, filename } = this.state\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <h1>AI Hydra Schedule Viewer</h1>\n        </div>\n        <div className=\"content\">\n          {\n            json\n              ? <Chart filename={filename} data={json}/>\n              : <Dropzone onFileParse={(xml, filename) => this.handleParsedFile(xml, filename)} />\n          }\n        </div>\n        <div className=\"footer\">\n          <p>Maintained by <a href = \"https://twitter.com/chris_whong\">Chris Whong</a>. Let me know if you have feature requests or find bugs, either by @-ing me on twitter, or by <a href=\"https://github.com/chriswhong/ai-hydra-viewer/issues\">opening a github issue</a>. </p>\n          <p>Check the the AI Prime/Hydra Reef Group on Facebook for some discussion about this prototype and a potential reef light settings sharing platform I&apos;d like to build</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}